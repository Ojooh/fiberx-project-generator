const fs                = require('fs');
const path              = require('path');
const EnvManagerUtil    = require("../utils/env_manager_util");
const DatabaseManager   = require("../models/index");
const HelperUtil        = require("../utils/index_util");

const { seeder_template_code } = require("./code_content_templates");

class SeederManager {
	constructor() { 
        this.ENV                    = new EnvManagerUtil().env_data;
        this.seeder_root_dir        = path.join(__dirname, "..", "seeders");
        this.mode                   = this.ENV?.MODE;

        this.database 				= new DatabaseManager(this.ENV);
        this.helper           		= new HelperUtil(this.ENV);
        this.database_models        = {};

        this.#ensureDirectoryExist(this.seeder_root_dir);
    }

    // method to convert pascal case to snake case
    #pascalToSnake = (name) => {
        return name.replace(/([a-z0-9])([A-Z])/g, '$1_$2').replace(/([A-Z])([A-Z][a-z])/g, '$1_$2').toLowerCase();
    };

    // method create backup directory if does not exist
    #ensureDirectoryExist = (directory_path) => {
        if (!fs.existsSync(directory_path)) {
            fs.mkdirSync(directory_path, { recursive: true });
        }
    }

    // Async method to initialize the database
	#initializeDatabase = async () => { 
		this.database_models = await this.database.initializeDBMS();; 
	}

    // method to extract a model schema and indexes
    #extractModelState = (model) => {
        const { migration_priority, columns }  = model?.schema;

        return { schema_fields: Object.keys(columns), migration_priority };
    };

    // method to generate seeder file name 
    #generateSeederFilename = (model_name, model_priority = "") => {
        const timestamp = new Date().toISOString().replace(/[-:.TZ]/g, '').slice(0, 14);
        return `${model_priority}_${model_name}_${timestamp}_seeder.js`;
    }

    // method to get a file prefix number (model_priority)
    #getPrefixNumber = (file) => {
        const match = file.match(/^(\d+)_/);
        return match ? parseInt(match[1], 10) : 0;
    };

    // method to generate schema record object from schema fields
    #generateSchemaObject = (schema_fields) => {
        const schema_obj = {};

        if(!Array.isArray(schema_fields) || !schema_fields || !schema_fields.length) {
            throw new Error(`Invalid schema for ${model_name} schema: ${schema_fields}`);
        }

        for (const field of schema_fields) {
            schema_obj[field] = null;
        }

        return schema_obj;
    }

    // 🔁 Replace placeholders in a template
    #replacePlaceholders = (template, values) => {
        return Object.keys(values).reduce(
            (result, key) => result.replaceAll(`{${key}}`, values[key]),
            template
        );
    };

    // method to write to seeder file
    #writeToSeederFile = (model_name, file_path, content) => {
        try {
            fs.writeFileSync(file_path, content);
            return true;
        } catch (error) {
            console.error(`❌ Error writing ${model_name} data: ${error.message}`);
            return false;
        }
    };

    // method to get seeder files related to a model
    #getSeederFiles = (model_name_snake = null, file_name = null) => {
        const all_seeder_files = fs.readdirSync(this.seeder_root_dir);
    
        let filtered_files;
    
        if (file_name) {
            // Direct match for full file name (including .js)
            filtered_files = all_seeder_files.filter(file => file === file_name);
        } else if (model_name_snake) {
            // Match files like: 01_user_20240505_seeder.js
            const regex = new RegExp(`^\\d+_${model_name_snake}_\\d+_seeder\\.js$`);
            filtered_files = all_seeder_files.filter(file => regex.test(file));
        } else {
            filtered_files = all_seeder_files;
        }
    
        return filtered_files.sort((a, b) => this.#getPrefixNumber(a) - this.#getPrefixNumber(b));
    }

    // method to handle seeding from a file to db
    #handleSeedFileToDb = async (file_name) => {
        try {
            if (["permissions.js"].includes(file_name)) { return; }

            const file_path             = path.join(this.seeder_root_dir, file_name);
            const SeederClass           = require(file_path);
            const seeder_instance       = new SeederClass(this.ENV, this.helper);
            const db_model              = this.database_models[seeder_instance?.model];
            const seeder_data           = seeder_instance.getModelSeedData();

            if (!db_model) {
                console.log(`❌ Model "${model}" not found in DB. Skipping ${file_name}`);
                return false;
            }

            const seeded = await db_model.bulkCreate(seeder_data, { ignore_duplicates: true });

            if(!seeded || !seeded.length) {
                console.error(`🚫 Error in handleSeedFileToDb for ${file_name}: ${error.message}`);
                return false;
            }

            console.log(`🌱 Seeded ${seeder_data.length} rows to model "${seeder_instance?.model}" from file "${file_name}"`);
        }
        catch(error) {
            console.log({ error });
            console.error(`🚫 Error in handleSeedFileToDb for ${file_name}: ${error.message}`);
            return false;
        }

        console.log('\n\n---\n\n');
        return true
    }

    // method to handle undoing seed from a file to a db
    #handleUndoSeedFileFromDb = async (file_name) => {
        try {
            if (["permissions.js"].includes(file_name)) { return; }

            const file_path             = path.join(this.seeder_root_dir, file_name);
            const SeederClass           = require(file_path);
            const seeder_instance       = new SeederClass(this.ENV, this.helper);
            const db_model              = this.database_models[seeder_instance?.model];
            const seeder_data           = seeder_instance.getModelSeedData();

            if (!db_model) {
                console.log(`❌ Model "${model}" not found in DB. Skipping ${file_name}`);
                return false;
            }

            for (const [index, row] of seeder_data.entries()) {
                const pk = Object.keys(row).find(k => ['id', 'public_id'].includes(k));
            
                if (pk) {
                    await db_model.destroy({ [pk]: row[pk] });
                    console.log(`🗑️ [${index + 1}/${seeder_data.length}] Deleted row with ${pk} = ${row[pk]}`);
                } else {
                    console.log(`⚠️ [${index + 1}/${seeder_data.length}] Primary key not found in row, skipping...`);
                }
            }


           console.log(`🧹 Undone seed for from file "${file_name}" sucessful`);
        }
        catch(error) {
            console.log({ error });
            console.error(`🚫 Error in handleUndoSeedFileFromDb for ${file_name}: ${error.message}`);
            return false;
        }

        console.log('\n\n---\n\n');
        return true
    }
    
    // method to seed database
    generateSeedFile = async (model_name = null) => {
        try {
            await this.#initializeDatabase();

            const database_model    = this.database_models[model_name];

            if (!this.database || !this.database_models || !database_model) {
                console.log('❌ Failed to connect to database or no models found.');
                return process.exit(1);
            }

            console.log('✅ Connected! Create seeder file(s).');

            const model_name_snake                      = this.#pascalToSnake(model_name);
            const { migration_priority, schema_fields } = this.#extractModelState(model);
            const seeder_file_name                      = this.#generateSeederFilename(model_name_snake, migration_priority);
            const model_schema_obj                      = this.#generateSchemaObject(schema_fields);
            const template_keys                         = { class_name: model_name, seed_data: JSON.stringify(model_schema_obj) }
            const code_content                          = this.#replacePlaceholders(seeder_template_code, template_keys).trim();
            const file_path                             = path.join(this.seeder_root_dir, seeder_file_name);

            this.#writeToSeederFile(model_name, file_path, code_content);
            console.log(`✅ Seeder created for model 📦 "${model_name}" (${model_name_snake}): ${file_path}`);
            return true;
        }
        catch (error) {
            console.error('💥 Error seeding to database:', error.message);
            return process.exit(1);
        }
    }

    // Method to execute seed fles
    executeSeed = async (model_name = null, file_name = null) => {
        try {
            await this.#initializeDatabase();

            const database_model    = this.database_models[model_name];
            file_name = file_name.includes(".js") ? file_name : `${file_name}.js`;

            if (!this.database || !this.database_models || (model_name && !database_model)) {
                console.log('❌ Failed to connect to database or no models found.');
                return process.exit(1);
            }

            console.log('✅ Connected! Execute seeder file(s).');

            const model_name_snake   = this.#pascalToSnake(model_name);
            const files              = this.#getSeederFiles(model_name_snake, file_name);  
            
            for (const file of files) {
                await this.#handleSeedFileToDb(file);
            }
            return true;
        }
        catch (error) {
            console.error('💥 Error seeding to database:', error.message);
            return process.exit(1);
        }
    }

    // method to undo seed
    undoSeedExecution = async (model_name = null, file_name = null) => {
        try {
            await this.#initializeDatabase();

            const database_model    = this.database_models[model_name];
            file_name = file_name.includes(".js") ? file_name : `${file_name}.js`;

            if (!this.database || !this.database_models || (model_name && !database_model)) {
                console.log('❌ Failed to connect to database or no models found.');
                return process.exit(1);
            }

            console.log('✅ Connected! Execute seeder file(s).');

            const model_name_snake   = this.#pascalToSnake(model_name);
            const files              = this.#getSeederFiles(model_name_snake, file_name);  

            for (const file of files.reverse()) {
                await this.#handleUndoSeedFileFromDb(file)
            }

            console.log(`\n✅ Undo Seed complete.`);
            return true;
        }
        catch (error) {
            console.error('💥 Error undoing seed to database:', error.message);
            return process.exit(1);
        }
    }

    // Helper method to parse flags
    parseFlags = (args) => {
        const flags = { model_name: null, file_name: null, seeder_for: null };

        args.forEach((arg, index) => {
            if (arg === '--model_name' && args[index + 1]) {
                flags.model_name = args[index + 1];
            }
            else if (arg === '--file_name' && args[index + 1]) {
                flags.file_name = args[index + 1];
            } 
            else if (arg === '--seeder_for' && args[index + 1]) {
                flags.seeder_for = args[index + 1];
            } 
        });

        return flags;
    }

    // main method 
    main = async () => {
        const args      = process.argv.slice(2);
        const command   = args[0];
        const flags     = this.parseFlags(args.slice(1));

        if (this.mode !== 'development') {
            console.error(`⚠️ Error: This script can only be run in development mode.`);
            process.exit(1);
        }

        switch (command) {
            case "create_seeder":
                await this.createSeederFile(flags?.model_name, flags?.seeder_for);
                return process.exit(0);
    
            case "seed":
                await this.seed(flags?.model_name, flags.file_name);
                return process.exit(0);
    
            case "undo_seed":
                await this.undoSeed(flags?.model_name, flags.file_name);
                return process.exit(0);
    
            default:
                console.log("❌ Invalid command. Use one of: create_seeder, seed --model_name [model_name] --file_name [file], undo_seed --model_name [model_name] --file_name [file] ");
                return process.exit(1);
        }

    }

}

module.exports = SeederManager;

// ▶️ Run the script with argument
const seeder_manager = new SeederManager();
seeder_manager.main();