class ServerUtils {
    constructor(debug) {
        this.debug = debug;
    }
  
    onServerError = (error) => {
        if (error.syscall !== 'listen') { throw error; }
        
        const bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;
  
        // Handle specific listen errors with friendly messages
        switch (error.code) {
            case 'EACCES':
                console.error(bind + ' requires elevated privileges');
                process.exit(1);
                break;
            case 'EADDRINUSE':
                console.error(bind + ' is already in use');
                process.exit(1);
                break;
            default:
                throw error;
        }
    }
  
    onServerListening(server) {
        const addr = server.address();
        const bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
        this.debug('Listening on ' + bind);
    }
  
    // Normalize a port into a number, string, or false.
    normalizePort = (port_value) => {
        const port = parseInt(port_value, 10);
  
        // named pipe
        if (isNaN(port)) { return port_value; }
    
        // port number
        if (port >= 0) { return port }
    
        return false;
    }
  }
  
  module.exports = ServerUtils;
  